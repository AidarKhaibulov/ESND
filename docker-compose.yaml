version: '3.8'

services:

  # user-service
  user-service:
    container_name: user
    build:
      context: ./user-service
      dockerfile: Dockerfile
    command: java -jar ./app.jar
    networks:
      - private-network
    ports:
      - "8080:8080"
    image: 'user-service'
    depends_on:
      - user-database
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://user-database:5600/user-service-base
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      SECRET_KEY: 53A73E5F1C4E0A2D3B5F2D784E6A1B423D6F247D1F6E5C3A596D635A75327855
      EXPIRATION: 86400000
      EXPIRATION_REFRESH: 604800000

  user-database:
    image: postgres:16
    container_name: user-database
    environment:
      POSTGRES_DB: user-service-base
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5600:5600"
    volumes:
      - user-postgres-data:/var/lib/postgresql/data
    command: postgres -p 5600
    networks:
      - private-network


  # order service
  order-service:
    container_name: order
    build:
      context: ./order-service
      dockerfile: Dockerfile
    command: java -jar ./app.jar
    ports:
      - "8070:8070"
    image: 'order-service'
    networks:
      - private-network
    depends_on:
      order-redis:
        condition: service_healthy
      order-database:
        condition: service_started
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://order-database:5500/order-service-base
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres

  order-database:
    image: postgres:16
    container_name: order-database
    ports:
      - "5500:5500"
    environment:
      POSTGRES_DB: order-service-base
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - order-postgres-data:/var/lib/postgresql/data
    command: postgres -p 5500
    networks:
      - private-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d order-service-base -U postgres" ]
      interval: 1s
      timeout: 2s
      retries: 5

  order-redis:
    container_name: order-redis
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - private-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 1s
      timeout: 2s
      retries: 5

  # kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:1180"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      - kafka

volumes:
  user-postgres-data:
  order-postgres-data:
  redis-data:

networks:
  private-network:
    driver: bridge
